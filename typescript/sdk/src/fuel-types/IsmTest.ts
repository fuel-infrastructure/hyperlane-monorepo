/* Autogenerated file. Do not edit manually. */

/*
  Fuels version: 0.100.1
*/
import { Interface, Contract as __Contract } from 'fuels';
import type {
  Account,
  Address,
  Bytes,
  FunctionFragment,
  InvokeFunction,
  Provider,
  StorageSlot,
} from 'fuels';

export enum ModuleTypeInput {
  UNUSED = 'UNUSED',
  ROUTING = 'ROUTING',
  AGGREGATION = 'AGGREGATION',
  LEGACY_MULTISIG = 'LEGACY_MULTISIG',
  MERKLE_ROOT_MULTISIG = 'MERKLE_ROOT_MULTISIG',
  MESSAGE_ID_MULTISIG = 'MESSAGE_ID_MULTISIG',
  NULL = 'NULL',
  CCIP_READ = 'CCIP_READ',
}
export enum ModuleTypeOutput {
  UNUSED = 'UNUSED',
  ROUTING = 'ROUTING',
  AGGREGATION = 'AGGREGATION',
  LEGACY_MULTISIG = 'LEGACY_MULTISIG',
  MERKLE_ROOT_MULTISIG = 'MERKLE_ROOT_MULTISIG',
  MESSAGE_ID_MULTISIG = 'MESSAGE_ID_MULTISIG',
  NULL = 'NULL',
  CCIP_READ = 'CCIP_READ',
}

const abi = {
  programType: 'contract',
  specVersion: '1',
  encodingVersion: '1',
  concreteTypes: [
    {
      type: '()',
      concreteTypeId:
        '2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d',
    },
    {
      type: 'bool',
      concreteTypeId:
        'b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903',
    },
    {
      type: 'enum interfaces::isms::ism::ModuleType',
      concreteTypeId:
        '4fcafc76b3c7218fc6592123cebdc1b111dcfb70e34f254ca8279c70c0d5fae5',
      metadataTypeId: 0,
    },
    {
      type: 'struct std::bytes::Bytes',
      concreteTypeId:
        'cdd87b7d12fe505416570c294c884bca819364863efe3bf539245fa18515fbbb',
      metadataTypeId: 2,
    },
  ],
  metadataTypes: [
    {
      type: 'enum interfaces::isms::ism::ModuleType',
      metadataTypeId: 0,
      components: [
        {
          name: 'UNUSED',
          typeId:
            '2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d',
        },
        {
          name: 'ROUTING',
          typeId:
            '2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d',
        },
        {
          name: 'AGGREGATION',
          typeId:
            '2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d',
        },
        {
          name: 'LEGACY_MULTISIG',
          typeId:
            '2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d',
        },
        {
          name: 'MERKLE_ROOT_MULTISIG',
          typeId:
            '2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d',
        },
        {
          name: 'MESSAGE_ID_MULTISIG',
          typeId:
            '2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d',
        },
        {
          name: 'NULL',
          typeId:
            '2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d',
        },
        {
          name: 'CCIP_READ',
          typeId:
            '2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d',
        },
      ],
    },
    {
      type: 'raw untyped ptr',
      metadataTypeId: 1,
    },
    {
      type: 'struct std::bytes::Bytes',
      metadataTypeId: 2,
      components: [
        {
          name: 'buf',
          typeId: 3,
        },
        {
          name: 'len',
          typeId: 4,
        },
      ],
    },
    {
      type: 'struct std::bytes::RawBytes',
      metadataTypeId: 3,
      components: [
        {
          name: 'ptr',
          typeId: 1,
        },
        {
          name: 'cap',
          typeId: 4,
        },
      ],
    },
    {
      type: 'u64',
      metadataTypeId: 4,
    },
  ],
  functions: [
    {
      inputs: [
        {
          name: 'accept',
          concreteTypeId:
            'b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903',
        },
      ],
      name: 'set_accept',
      output:
        '2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d',
      attributes: [
        {
          name: 'storage',
          arguments: ['write'],
        },
      ],
    },
    {
      inputs: [],
      name: 'module_type',
      output:
        '4fcafc76b3c7218fc6592123cebdc1b111dcfb70e34f254ca8279c70c0d5fae5',
      attributes: null,
    },
    {
      inputs: [
        {
          name: '_metadata',
          concreteTypeId:
            'cdd87b7d12fe505416570c294c884bca819364863efe3bf539245fa18515fbbb',
        },
        {
          name: '_message',
          concreteTypeId:
            'cdd87b7d12fe505416570c294c884bca819364863efe3bf539245fa18515fbbb',
        },
      ],
      name: 'verify',
      output:
        'b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903',
      attributes: [
        {
          name: 'storage',
          arguments: ['read'],
        },
      ],
    },
  ],
  loggedTypes: [],
  messagesTypes: [],
  configurables: [],
};

const storageSlots: StorageSlot[] = [
  {
    key: '82b3cd04490d6f850b464812a9e32b69a36eb2058017ddddcc4367f48c1c2bdc',
    value: '0100000000000000000000000000000000000000000000000000000000000000',
  },
];

export class IsmTestInterface extends Interface {
  constructor() {
    super(abi);
  }

  declare functions: {
    set_accept: FunctionFragment;
    module_type: FunctionFragment;
    verify: FunctionFragment;
  };
}

export class IsmTest extends __Contract {
  static readonly abi = abi;
  static readonly storageSlots = storageSlots;

  declare interface: IsmTestInterface;
  declare functions: {
    set_accept: InvokeFunction<[accept: boolean], void>;
    module_type: InvokeFunction<[], ModuleTypeOutput>;
    verify: InvokeFunction<[_metadata: Bytes, _message: Bytes], boolean>;
  };

  constructor(id: string | Address, accountOrProvider: Account | Provider) {
    super(id, abi, accountOrProvider);
  }
}
